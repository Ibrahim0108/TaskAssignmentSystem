@model List<TaskAssignmentSystem.Models.Teams.Team>
@using TaskAssignmentSystem.Models.Users
@using TaskAssignmentSystem.Models.Teams

@{
    var ws = ViewBag.Workspace as TaskAssignmentSystem.Models.Workspaces.Workspace;
    var role = Context.Session.GetString("UserRole");
    var users = ViewBag.Users as List<User>;
}

<div class="card p-3 mt-2">
    <div class="d-flex align-items-center">
        <h3 class="mb-0">Teams in @ws!.Name</h3>
        <div class="ms-auto">
            <a class="btn btn-outline-secondary btn-sm" href="@Url.Action("Index", "Workspaces")">Back</a>
            @if (role == "Teacher" || role == "Admin")
            {
                <a class="btn btn-warning btn-sm ms-2" href="@Url.Action("Edit", "Workspaces", new { id = ws.Id })">Edit</a>
            }
        </div>
    </div>
    <p class="mt-2">Workspace Id: @ws.Id</p>
    <hr />

    <div class="mb-3 d-flex gap-2">
        @if (role == "Teacher" || role == "Admin")
        {
            <a class="btn btn-primary" href="/Teams/Create?workspaceId=@ws.Id">Create Team</a>
        }
        <a class="btn btn-outline-success ms-2" href="/Teams/Join?workspaceId=@ws.Id">Join Team</a>
    </div>

    <div class="mt-3">
        @if (!Model.Any())
        {
            <div class="alert alert-info">No teams yet.</div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Join Code</th>
                        <th>Leader</th>
                        <th>Members</th>
                        <th>Progress</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in Model)
                    {
                        var updates = t.Updates;

                        Func<SubtaskStatus, int> statusToPercent = status =>
                        {
                            return status switch
                            {
                                SubtaskStatus.NotStarted => 0,
                                SubtaskStatus.InProgress => 50,
                                SubtaskStatus.Completed => 100,
                                SubtaskStatus.Blocked => 25,
                                _ => 0
                            };
                        };

                        var overallProgress = updates.Any()
                        ? (int)updates.Average(u => statusToPercent(u.Status))
                        : 0;

                        string progressText = overallProgress switch
                        {
                            0 => "Not Started",
                            <= 49 => "In Progress",
                            < 100 => "Almost Done",
                            100 => "Completed",
                            _ => "Unknown"
                        };

                        string progressBarClass = overallProgress switch
                        {
                            0 => "bg-secondary",
                            <= 49 => "bg-warning",
                            < 100 => "bg-info",
                            100 => "bg-success",
                            _ => "bg-secondary"
                        };

                        <tr>
                            <td>@t.Id</td>
                            <td>@t.Name</td>
                            <td>
                                @if (role == "Teacher")
                                {
                                    <code>@t.JoinCode</code>
                                }
                                else
                                {
                                    <span class="text-muted">Hidden</span>
                                }
                            </td>
                            <td>
                                @{
                                    var leader = users?.FirstOrDefault(u => u.Id == t.LeaderUserId);
                                }
                                @(leader != null ? leader.FullName : $"User {t.LeaderUserId}")
                            </td>
                            <td>
                                <div class="progress" style="height: 25px;">
                                    <div class="progress-bar @progressBarClass"
                                         role="progressbar"
                                         style="width:@overallProgress%"
                                         aria-valuenow="@overallProgress"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <div class="small text-muted mt-1">
                                    @progressText (@overallProgress%)
                                </div>
                            </td>
                            <td>
                                @if (t.IsSubmitted)
                                {
                                    <span class="badge bg-success">Submitted @t.SubmittedAt</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning text-dark">In Progress</span>
                                }
                            </td>
                            <td>
                                <a class="btn btn-sm btn-secondary" href="/Teams/Details/@t.Id">Details</a>
                                @if (role == "Teacher" || role == "Admin")
                                {
                                    <a class="btn btn-sm btn-warning" href="/Teams/Edit/@t.Id">Edit</a>
                                    <form method="post" asp-action="Delete" asp-route-id="@t.Id" style="display:inline;">
                                        <button type="submit" class="btn btn-sm btn-danger"
                                                onclick="return confirm('Are you sure you want to delete this team?');">
                                            Delete
                                        </button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f8fffe 0%, #f0fdf4 100%);
        min-height: 100vh;
        padding: 40px 20px;
        line-height: 1.6;
    }

    /* Container */
    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    /* Card Container */
    .card {
        background: linear-gradient(145deg, #ffffff 0%, #fefffe 100%);
        border: 1px solid rgba(34, 197, 94, 0.08);
        border-radius: 24px;
        box-shadow: 0 25px 60px rgba(34, 197, 94, 0.06), 0 15px 40px rgba(0, 0, 0, 0.03);
        position: relative;
        overflow: hidden;
        transition: all 0.4s ease;
        animation: slideUp 0.8s ease-out;
        padding: 32px;
        margin-top: 20px;
    }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
        }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(40px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Header Section */
    .header-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 24px;
        animation: fadeInLeft 0.6s ease-out 0.2s both;
    }

    h3 {
        color: #15803d;
        font-size: 28px;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin: 0;
        position: relative;
        padding-left: 40px;
    }

        h3::before {
            content: '??';
            position: absolute;
            left: 0;
            top: -2px;
            font-size: 28px;
            animation: bounce 2s infinite;
        }

    @@keyframes fadeInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-6px);
    }

    60% {
        transform: translateY(-3px);
    }

    }

    /* Button Groups */
    .button-group {
        display: flex;
        gap: 12px;
        align-items: center;
    }

    .action-buttons {
        display: flex;
        gap: 12px;
        margin-bottom: 24px;
        animation: fadeIn 0.8s ease-out 0.4s both;
    }

    /* Workspace Info */
    .workspace-info {
        color: #6b7280;
        font-size: 14px;
        font-weight: 500;
        margin-bottom: 16px;
        padding-left: 40px;
        animation: fadeIn 0.8s ease-out 0.3s both;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    /* HR Styling */
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, rgba(34, 197, 94, 0.2), transparent);
        margin: 24px 0;
        animation: fadeIn 0.8s ease-out 0.5s both;
    }

    /* Button Styling */
    .btn {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
        border: 2px solid;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        white-space: nowrap;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-sm {
        padding: 8px 16px;
        font-size: 13px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #22c55e 0%, #15803d 100%);
        border-color: #15803d;
        color: white;
        box-shadow: 0 6px 20px rgba(34, 197, 94, 0.25);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #15803d 0%, #14532d 100%);
            border-color: #14532d;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(34, 197, 94, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-outline-secondary {
        background: transparent;
        border-color: #6b7280;
        color: #6b7280;
    }

        .btn-outline-secondary:hover {
            background: #6b7280;
            border-color: #6b7280;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .btn-outline-success {
        background: transparent;
        border-color: #22c55e;
        color: #22c55e;
    }

        .btn-outline-success:hover {
            background: #22c55e;
            border-color: #22c55e;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .btn-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        border-color: #d97706;
        color: white;
        box-shadow: 0 6px 20px rgba(245, 158, 11, 0.25);
    }

        .btn-warning:hover {
            background: linear-gradient(135deg, #d97706 0%, #b45309 100%);
            border-color: #b45309;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(245, 158, 11, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        border-color: #4b5563;
        color: white;
        box-shadow: 0 6px 20px rgba(107, 114, 128, 0.2);
    }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            border-color: #374151;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(107, 114, 128, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        border-color: #dc2626;
        color: white;
        box-shadow: 0 6px 20px rgba(239, 68, 68, 0.25);
    }

        .btn-danger:hover {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            border-color: #b91c1c;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.35);
            color: white;
        }

    /* Alert Styling */
    .alert {
        padding: 20px 24px;
        border-radius: 16px;
        font-weight: 500;
        border: 2px solid;
        animation: fadeIn 0.8s ease-out 0.6s both;
    }

    .alert-info {
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
        border-color: #3b82f6;
        color: #1e40af;
    }

    /* Table Styling */
    .table-container {
        animation: fadeIn 0.8s ease-out 0.7s both;
        overflow-x: auto;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(34, 197, 94, 0.08);
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 16px;
        overflow: hidden;
    }

        .table thead {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        }

        .table th {
            padding: 16px 20px;
            font-weight: 600;
            color: #15803d;
            text-align: left;
            border-bottom: 2px solid rgba(34, 197, 94, 0.1);
            font-size: 14px;
            letter-spacing: 0.5px;
        }

        .table td {
            padding: 16px 20px;
            border-bottom: 1px solid rgba(34, 197, 94, 0.05);
            color: #374151;
            font-weight: 500;
            vertical-align: middle;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

            .table tbody tr:hover {
                background: linear-gradient(135deg, rgba(240, 253, 244, 0.5) 0%, rgba(220, 252, 231, 0.3) 100%);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);
            }

    /* Progress Bar Styling */
    .progress {
        height: 25px;
        background: rgba(34, 197, 94, 0.1);
        border-radius: 12px;
        overflow: hidden;
        position: relative;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .progress-bar {
        height: 100%;
        transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        border-radius: 12px;
    }

        .progress-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shimmer 2s infinite;
        }

    @@keyframes shimmer {
        0%

    {
        left: -100%;
    }

    100% {
        left: 100%;
    }

    }

    .bg-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    }

    .bg-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }

    .bg-info {
        background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
    }

    .bg-success {
        background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
    }

    /* Badge Styling */
    .badge {
        padding: 6px 12px;
        border-radius: 8px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .badge.bg-success {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
            color: white;
        }

        .badge.bg-warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }

    .text-dark {
        color: #374151 !important;
    }

    /* Code Styling */
    code {
        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
        color: #374151;
        padding: 4px 8px;
        border-radius: 6px;
        font-family: 'Courier New', monospace;
        font-weight: 600;
        border: 1px solid rgba(34, 197, 94, 0.2);
    }

    .text-muted {
        color: #9ca3af;
        font-style: italic;
    }

    /* Small text styling */
    .small {
        font-size: 12px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        body

    {
        padding: 20px 15px;
    }

    .card {
        padding: 20px;
    }

    .header-section {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    .button-group {
        flex-wrap: wrap;
    }

    .action-buttons {
        flex-direction: column;
        gap: 8px;
    }

    h3 {
        font-size: 24px;
        padding-left: 35px;
    }

        h3::before {
            font-size: 24px;
        }

    .table-container {
        overflow-x: auto;
    }

    .table {
        min-width: 800px;
    }

    .btn {
        width: 100%;
        margin-bottom: 8px;
    }

    .btn-sm {
        width: auto;
        margin-bottom: 4px;
    }

    }

    @@media (max-width: 576px) {
        h3

    {
        font-size: 20px;
        padding-left: 30px;
    }

    h3::before {
        font-size: 20px;
    }

    .card {
        padding: 16px;
    }

    .table th,
    .table td {
        padding: 12px 16px;
        font-size: 13px;
    }

    }

    /* Loading States */
    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }

    /* Form inline styling */
    form[style*="inline"] {
        display: inline-block;
        margin-left: 8px;
    }

    /* Animation delays for table rows */
    .table tbody tr:nth-child(1) {
        animation: fadeInUp 0.6s ease-out 0.8s both;
    }

    .table tbody tr:nth-child(2) {
        animation: fadeInUp 0.6s ease-out 0.9s both;
    }

    .table tbody tr:nth-child(3) {
        animation: fadeInUp 0.6s ease-out 1.0s both;
    }

    .table tbody tr:nth-child(4) {
        animation: fadeInUp 0.6s ease-out 1.1s both;
    }

    .table tbody tr:nth-child(5) {
        animation: fadeInUp 0.6s ease-out 1.2s both;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>


<script>
    // Confirmation dialog for delete actions
    function confirmDelete(event, teamName) {

        const confirmed = confirm(`Are you sure you want to delete "${teamName}"?\n\nThis action cannot be undone and will remove all team data, progress, and member assignments.`);

        if (confirmed) {
            const button = event.target;
            const originalText = button.innerHTML;

            // Show loading state
            button.disabled = true;
            button.innerHTML = '? Deleting...';
            button.style.background = 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)';

            // Simulate deletion process
            setTimeout(() => {
                // Remove the row with animation
                const row = button.closest('tr');
                row.style.transition = 'all 0.5s ease';
                row.style.opacity = '0';
                row.style.transform = 'translateX(-100%)';

                setTimeout(() => {
                    row.remove();

                    // Show success message
                    showNotification(`Team "${teamName}" has been deleted successfully.`, 'success');

                    // Check if table is empty
                    const tbody = document.querySelector('.table tbody');
                    if (tbody.children.length === 0) {
                        const tableContainer = document.querySelector('.table-container');
                        tableContainer.innerHTML = '<div class="alert alert-info">No teams yet.</div>';
                    }
                }, 500);
            }, 2000);
        }

        return false;
    }

    // Show notification function
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            min-width: 300px;
            animation: slideInRight 0.5s ease-out;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease-out';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
    }

    // Add ripple effect to buttons
    document.querySelectorAll('.btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            if (this.disabled) return;

            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                left: ${x}px;
                top: ${y}px;
                background: rgba(255, 255, 255, 0.3);
                border-radius: 50%;
                transform: scale(0);
                animation: ripple 0.6s ease-out;
                pointer-events: none;
            `;

            this.appendChild(ripple);

            setTimeout(() => ripple.remove(), 600);
        });
    });

    // Animate progress bars on load
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
            document.querySelectorAll('.progress-bar').forEach((bar, index) => {
                const width = bar.style.width;
                bar.style.width = '0%';

                setTimeout(() => {
                    bar.style.width = width;
                }, index * 200);
            });
        }, 1000);
    });

    // Add CSS for animations
    const style = document.createElement('style');
    style.textContent = `
        @@keyframes ripple {
            to {
                transform: scale(2);
                opacity: 0;
            }
        }

        @@keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes slideOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    `;
    document.head.appendChild(style);

    // Enhanced hover effects for table rows
    document.querySelectorAll('.table tbody tr').forEach(row => {
        row.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 8px 25px rgba(34, 197, 94, 0.15)';
        });

        row.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    });
</script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'979512d055876f7a',t:'MTc1NjkwMDY4Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
