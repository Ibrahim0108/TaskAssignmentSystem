@model TaskAssignmentSystem.Models.Teams.Team
@inject TaskAssignmentSystem.Services.Interfaces.IAuthService Auth
@{
    var role = Context.Session.GetString("UserRole");
    var userId = Context.Session.GetInt32("UserId");
}
<div class="container mt-4">
    <div class="card">
        <div class="header-section">
            <div>
                <h3 class="mb-0">Team: @Model.Name</h3>
            </div>
            <div class="button-group">

                @if (userId == Model.LeaderUserId && !Model.IsSubmitted)
                {
                    <button class="btn btn-outline-primary btn-sm me-2" id="openAssignModal">+ Assign Task</button>
                }
                <button class="btn btn-info btn-sm me-2" data-bs-toggle="modal" data-bs-target="#membersModal">
                    View Members
                </button>
                @if (role == "Teacher" || role == "Admin")
                {
                    <a class="btn btn-warning btn-sm me-2" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                    <form method="post" asp-action="Delete" asp-route-id="@Model.Id" style="display:inline;"
                          data-confirm="true"
                          data-confirm-title="Delete Team"
                          data-confirm-message="Are you sure you want to delete this team?">
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </form>
                }
                <a class="btn btn-outline-secondary btn-sm ms-2" href="/Teams/ForWorkspace/@Model.WorkspaceId">Back</a>
            </div>
        </div>

        <!-- Info Section -->
        <div class="info-section">
            <div class="info-item">
                @if (role == "Teacher")
                {
                    <p>Join Code: <code>@Model.JoinCode</code></p>
                }
            </div>
            <div class="info-item">
                <p>
                    Leader:
                    @{
                        var leader = Auth.GetById(Model.LeaderUserId);
                    }
                    @(leader != null ? leader.FullName : $"User {Model.LeaderUserId}")
                </p>
            </div>
            <div class="info-item">
                <p>
                    Status:
                    @if (Model.IsSubmitted)
                    {
                        <span class="badge bg-success">Submitted @Model.SubmittedAt</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark">In Progress</span>
                    }
                </p>
            </div>
        </div>

        <!-- Assign button -->
        @* <div style="text-align: center; margin-bottom: 32px;">
            <p>
                @if (userId == Model.LeaderUserId && !Model.IsSubmitted)
                {
                    <button class="btn btn-outline-primary mt-3" id="openAssignModal">+ Assign Task</button>
                }
            </p>
        </div> *@

        @* <hr /> *@


        <!-- Split Section -->
        <div class="split-section">
            <!-- Left side: Updates Table -->
            <div class="left-card">
                <h5>Updates</h5>
                @if (!Model.Updates.Any())
                {
                    <div class="alert alert-info">No updates yet.</div>
                }
                else
                {
                    <table class="table table-sm">
                        <thead><tr><th>When</th><th>By</th><th>Content</th><th>Reviewed</th><th></th></tr></thead>
                        <tbody>
                            @foreach (var u in Model.Updates.OrderByDescending(x => x.CreatedAt))
                            {
                                var user = Auth.GetById(u.UserId);
                                <tr>
                                    <td>@u.CreatedAt.ToLocalTime()</td>
                                    <td>@(user != null ? user.FullName : $"User {u.UserId}")</td>
                                    <td>@u.Content</td>
                                    @if (u.AssignedToUserId.HasValue)
                                    {
                                        var target = Auth.GetById(u.AssignedToUserId.Value);
                                        if (target != null)
                                        {
                                            <div><small class="text-muted">Assigned to: @target.FullName</small></div>
                                        }
                                    }
                                    <td>@(u.ReviewedByLeader ? "Yes" : "No")</td>
                                    <td>
                                        @if (userId == Model.LeaderUserId && !u.ReviewedByLeader)
                                        {
                                            <form method="post" asp-action="LeaderReview">
                                                <input type="hidden" name="teamId" value="@Model.Id" />
                                                <input type="hidden" name="updateId" value="@u.Id" />
                                                <button class="btn btn-sm btn-outline-success" type="submit">Mark Reviewed</button>
                                            </form>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            <!-- Right side: Add Update Form -->
            <div class="right-card">
                @if (userId != null && Model.TeamMembers.Any(m => m.UserId == userId.Value) && !Model.IsSubmitted)
                {
                    <div class="card mt-3">
                        <div class="card-body">
                            <form method="post" asp-action="AddUpdate"
                                  data-confirm="true"
                                  data-confirm-title="Add Update"
                                  data-confirm-message="Are you sure you want to post this update?">
                                <input type="hidden" name="teamId" value="@Model.Id" />
                                <div class="mb-2">
                                    <textarea name="content" class="form-control" rows="2" placeholder="Describe subtask..." required></textarea>
                                </div>
                                <div class="mb-2">
                                    <label>Status:</label>
                                    <select name="status" class="form-select" required>
                                        <option value="0">Not Started</option>
                                        <option value="1">In Progress</option>
                                        <option value="2">Completed</option>
                                        <option value="3">Blocked</option>
                                    </select>
                                </div>
                                <button class="btn btn-primary btn-sm" type="submit">Add Update</button>
                            </form>
                        </div>
                    </div>
                }

                @if (userId == Model.LeaderUserId && !Model.IsSubmitted)
                {
                    <form class="mt-3" method="post" asp-action="Submit"
                          data-confirm="true"
                          data-confirm-title="Submit Team"
                          data-confirm-message="Are you sure you want to submit the team to the teacher?">
                        <input type="hidden" name="teamId" value="@Model.Id" />
                        <button class="btn btn-danger" type="submit">Submit To Teacher</button>
                    </form>
                }
            </div>
        </div>
    </div>
</div>


<div id="assignModal" class="modal-overlay" style="display:none;">
    <div class="modal-content">
        <h5>Assign Task</h5>
        <form method="post" asp-action="AssignTask">
            <input type="hidden" name="teamId" value="@Model.Id" />

            <div class="mb-2">
                <label>Assign To:</label>
                <select name="assignedToUserId" class="form-select" required>
                    @foreach (var member in Model.TeamMembers)
                    {
                        var u = Auth.GetById(member.UserId);
                        if (u != null && member.UserId != Model.LeaderUserId)
                        {
                            <option value="@u.Id">@u.FullName (@u.Username)</option>
                        }
                    }
                </select>
            </div>

            <div class="mb-2">
                <label>Task Description:</label>
                <textarea name="content" class="form-control" rows="2" required></textarea>
            </div>

            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-secondary me-2" id="closeAssignModal">Cancel</button>
                <button type="submit" class="btn btn-primary">Assign</button>
            </div>
        </form>
    </div>
</div>


<div class="modal fade" id="membersModal" tabindex="-1" aria-labelledby="membersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="membersModalLabel">Team Members</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Model.TeamMembers == null || !Model.TeamMembers.Any())
                {
                    <div class="alert alert-warning">No members yet.</div>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var member in Model.TeamMembers)
                        {
                            var u = Auth.GetById(member.UserId);
                            if (u != null && member.UserId != Model.LeaderUserId)
                            {
                                <li class="list-group-item">@u.FullName (@u.Username) - @u.Role</li>
                            }
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>






<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f8fffe 0%, #f0fdf4 100%);
        min-height: 100vh;
        padding: 40px 20px;
        line-height: 1.6;
    }

    /* Container */
    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    /* Card Container */
    .card {
        background: linear-gradient(145deg, #ffffff 0%, #fefffe 100%);
        border: 1px solid rgba(34, 197, 94, 0.08);
        border-radius: 24px;
        box-shadow: 0 25px 60px rgba(34, 197, 94, 0.06), 0 15px 40px rgba(0, 0, 0, 0.03);
        position: relative;
        overflow: hidden;
        transition: all 0.4s ease;
        animation: slideUp 0.8s ease-out;
        padding: 32px;
        margin-bottom: 24px;
    }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
        }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(40px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Header Section */
    .header-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 32px;
        animation: fadeInLeft 0.6s ease-out 0.2s both;
    }

    h3 {
        color: #15803d;
        font-size: 32px;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin: 0;
        position: relative;
        padding-left: 50px;
    }

        h3::before {
            content: '??';
            position: absolute;
            left: 0;
            top: -2px;
            font-size: 32px;
            animation: bounce 2s infinite;
        }

    h5 {
        color: #15803d;
        font-size: 20px;
        font-weight: 600;
        margin: 32px 0 16px 0;
        position: relative;
        padding-left: 35px;
    }

        h5::before {
            position: absolute;
            left: 0;
            top: 0;
            font-size: 18px;
        }

        h5:nth-of-type(1)::before {
            content: '??';
        }

        h5:nth-of-type(2)::before {
            content: '??';
        }

    @@keyframes fadeInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-6px);
    }

    60% {
        transform: translateY(-3px);
    }

    }

    .split-section {
        display: grid;
        grid-template-columns: 65% 35%;
        gap: 24px;
        margin-top: 32px;
    }

    .left-card, .right-card {
        background: #fff;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 8px 25px rgba(34, 197, 94, 0.08);
    }

    @@media (max-width: 768px) {
        .split-section

    {
        grid-template-columns: 1fr;
    }

    }

    /* Button Groups */
    .button-group {
        display: flex;
        gap: 12px;
        align-items: center;
    }

    /* Button Styling */
    .btn {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
        border: 2px solid;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        white-space: nowrap;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-sm {
        padding: 8px 16px;
        font-size: 13px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #22c55e 0%, #15803d 100%);
        border-color: #15803d;
        color: white;
        box-shadow: 0 6px 20px rgba(34, 197, 94, 0.25);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #15803d 0%, #14532d 100%);
            border-color: #14532d;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(34, 197, 94, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-outline-primary {
        background: transparent;
        border-color: #22c55e;
        color: #22c55e;
    }

        .btn-outline-primary:hover {
            background: #22c55e;
            border-color: #22c55e;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .btn-outline-secondary {
        background: transparent;
        border-color: #6b7280;
        color: #6b7280;
    }

        .btn-outline-secondary:hover {
            background: #6b7280;
            border-color: #6b7280;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .btn-outline-success {
        background: transparent;
        border-color: #22c55e;
        color: #22c55e;
    }

        .btn-outline-success:hover {
            background: #22c55e;
            border-color: #22c55e;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .btn-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        border-color: #d97706;
        color: white;
        box-shadow: 0 6px 20px rgba(245, 158, 11, 0.25);
    }

        .btn-warning:hover {
            background: linear-gradient(135deg, #d97706 0%, #b45309 100%);
            border-color: #b45309;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(245, 158, 11, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        border-color: #4b5563;
        color: white;
        box-shadow: 0 6px 20px rgba(107, 114, 128, 0.2);
    }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            border-color: #374151;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(107, 114, 128, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        border-color: #dc2626;
        color: white;
        box-shadow: 0 6px 20px rgba(239, 68, 68, 0.25);
    }

        .btn-danger:hover {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            border-color: #b91c1c;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.35);
            color: white;
        }

    /* Info Section */
    .info-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
        animation: fadeIn 0.8s ease-out 0.4s both;
    }

    .info-item {
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        border: 1px solid rgba(34, 197, 94, 0.1);
        border-radius: 16px;
        padding: 20px;
        position: relative;
    }

        .info-item strong {
            color: #15803d;
            font-weight: 600;
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .info-item .value {
            color: #374151;
            font-size: 16px;
            font-weight: 500;
        }

    /* Code Styling */
    code {
        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
        color: #374151;
        padding: 8px 12px;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        font-weight: 600;
        border: 1px solid rgba(34, 197, 94, 0.2);
        font-size: 14px;
        letter-spacing: 1px;
    }

    /* Badge Styling */
    .badge {
        padding: 8px 16px;
        border-radius: 12px;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
    }

        .badge.bg-success {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
            color: white;
        }

        .badge.bg-warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }

    .text-dark {
        color: #374151 !important;
    }

    /* Alert Styling */
    .alert {
        padding: 20px 24px;
        border-radius: 16px;
        font-weight: 500;
        border: 2px solid;
        margin-bottom: 24px;
        animation: fadeIn 0.8s ease-out 0.6s both;
    }

    .alert-warning {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        border-color: #f59e0b;
        color: #92400e;
    }

    .alert-info {
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
        border-color: #3b82f6;
        color: #1e40af;
    }

    /* HR Styling */
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, rgba(34, 197, 94, 0.2), transparent);
        margin: 32px 0;
        animation: fadeIn 0.8s ease-out 0.5s both;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    /* Members List */
    .members-list {
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        border: 1px solid rgba(34, 197, 94, 0.1);
        border-radius: 16px;
        padding: 24px;
        margin-bottom: 32px;
    }

        .members-list ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .members-list li {
            padding: 12px 16px;
            margin-bottom: 8px;
            background: white;
            border: 1px solid rgba(34, 197, 94, 0.1);
            border-radius: 12px;
            color: #374151;
            font-weight: 500;
            position: relative;
            padding-left: 50px;
            transition: all 0.3s ease;
        }

            .members-list li::before {
                content: '??';
                position: absolute;
                left: 16px;
                top: 12px;
                font-size: 16px;
            }

            .members-list li:hover {
                background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);
            }

    /* Table Styling */
    .table-container {
        animation: fadeIn 0.8s ease-out 0.7s both;
        overflow-x: auto;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(34, 197, 94, 0.08);
        margin-bottom: 32px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 16px;
        overflow: hidden;
    }

        .table thead {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        }

        .table th {
            padding: 16px 20px;
            font-weight: 600;
            color: #15803d;
            text-align: left;
            border-bottom: 2px solid rgba(34, 197, 94, 0.1);
            font-size: 14px;
            letter-spacing: 0.5px;
        }

        .table td {
            padding: 16px 20px;
            border-bottom: 1px solid rgba(34, 197, 94, 0.05);
            color: #374151;
            font-weight: 500;
            vertical-align: middle;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

            .table tbody tr:hover {
                background: linear-gradient(135deg, rgba(240, 253, 244, 0.5) 0%, rgba(220, 252, 231, 0.3) 100%);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);
            }

    /* Form Styling */
    .form-control, .form-select {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid rgba(34, 197, 94, 0.15);
        border-radius: 12px;
        font-size: 14px;
        color: #374151;
        background: linear-gradient(145deg, #ffffff 0%, #f9fafb 100%);
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(34, 197, 94, 0.05);
    }

        .form-control:focus, .form-select:focus {
            outline: none;
            border-color: #22c55e;
            box-shadow: 0 0 0 4px rgba(34, 197, 94, 0.08), 0 4px 12px rgba(34, 197, 94, 0.15);
            background: linear-gradient(145deg, #f0fdf4 0%, #dcfce7 100%);
        }

    textarea.form-control {
        resize: vertical;
        min-height: 80px;
    }

    /* Form Labels */
    label {
        display: block;
        margin-bottom: 8px;
        color: #374151;
        font-weight: 600;
        font-size: 14px;
    }

    /* Spacing */
    .mb-2 {
        margin-bottom: 16px;
    }

    .mb-3 {
        margin-bottom: 24px;
    }

    .mt-3 {
        margin-top: 24px;
    }

    .me-2 {
        margin-right: 16px;
    }

    .ms-2 {
        margin-left: 16px;
    }

    .ms-auto {
        margin-left: auto;
    }

    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(8px);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease-out;
    }

    .modal-content {
        background: linear-gradient(145deg, #ffffff 0%, #fefffe 100%);
        border: 1px solid rgba(34, 197, 94, 0.08);
        border-radius: 24px;
        padding: 32px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 25px 60px rgba(34, 197, 94, 0.15), 0 15px 40px rgba(0, 0, 0, 0.1);
        animation: slideUp 0.3s ease-out;
        position: relative;
    }

        .modal-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
            border-radius: 24px 24px 0 0;
        }

        .modal-content h5 {
            color: #15803d;
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 24px;
            padding-left: 35px;
            position: relative;
        }

            .modal-content h5::before {
                content: '??';
                position: absolute;
                left: 0;
                top: 0;
                font-size: 24px;
            }

    /* Flex utilities */
    .d-flex {
        display: flex;
    }

    .align-items-center {
        align-items: center;
    }

    .justify-content-end {
        justify-content: flex-end;
    }

    /* Text utilities */
    .text-muted {
        color: #9ca3af;
        font-style: italic;
    }

    .small {
        font-size: 12px;
    }

    /* Form inline */
    form[style*="inline"] {
        display: inline-block;
        margin-left: 8px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        body

    {
        padding: 20px 15px;
    }

    .card {
        padding: 20px;
    }

    .header-section {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    .button-group {
        flex-wrap: wrap;
    }

    h3 {
        font-size: 26px;
        padding-left: 40px;
    }

        h3::before {
            font-size: 26px;
        }

    .info-section {
        grid-template-columns: 1fr;
    }

    .table-container {
        overflow-x: auto;
    }

    .table {
        min-width: 800px;
    }

    .btn {
        margin-bottom: 8px;
    }

    .modal-content {
        padding: 24px;
        width: 95%;
    }

    }

    @@media (max-width: 576px) {
        h3

    {
        font-size: 22px;
        padding-left: 35px;
    }

    h3::before {
        font-size: 22px;
    }

    .card {
        padding: 16px;
    }

    .table th,
    .table td {
        padding: 12px 16px;
        font-size: 13px;
    }

    .modal-content {
        padding: 20px;
    }

    }

    /* Animation delays for table rows */
    .table tbody tr:nth-child(1) {
        animation: fadeInUp 0.6s ease-out 0.8s both;
    }

    .table tbody tr:nth-child(2) {
        animation: fadeInUp 0.6s ease-out 0.9s both;
    }

    .table tbody tr:nth-child(3) {
        animation: fadeInUp 0.6s ease-out 1.0s both;
    }

    .table tbody tr:nth-child(4) {
        animation: fadeInUp 0.6s ease-out 1.1s both;
    }

    .table tbody tr:nth-child(5) {
        animation: fadeInUp 0.6s ease-out 1.2s both;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Status indicators */
    .status-not-started {
        color: #6b7280;
    }

    .status-in-progress {
        color: #f59e0b;
    }

    .status-completed {
        color: #22c55e;
    }

    .status-blocked {
        color: #ef4444;
    }
</style>


    <script>
        // Modal functionality
        const assignModal = document.getElementById('assignModal');
        const openAssignModal = document.getElementById('openAssignModal');
        const closeAssignModal = document.getElementById('closeAssignModal');

        openAssignModal.addEventListener('click', function() {
            assignModal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        });

        closeAssignModal.addEventListener('click', function() {
            assignModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        });

        // Close modal when clicking outside
        assignModal.addEventListener('click', function(e) {
            if (e.target === assignModal) {
                assignModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });

        // Confirmation dialogs
        function confirmDelete(event, teamName) {

            const confirmed = confirm(`Are you sure you want to delete "${teamName}"?\n\nThis action cannot be undone and will remove all team data, progress, and member assignments.`);

            if (confirmed) {
                const button = event.target;
                button.disabled = true;
                button.innerHTML = '? Deleting...';

                setTimeout(() => {
                    showNotification(`Team "${teamName}" has been deleted successfully.`, 'success');
                    setTimeout(() => {
                        alert('Redirecting to teams list...');
                    }, 2000);
                }, 2000);
            }

            return false;
        }

        function confirmAddUpdate(event) {

            const confirmed = confirm('Are you sure you want to post this update?');

            if (confirmed) {
                const button = event.target.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;

                button.disabled = true;
                button.innerHTML = '? Adding Update...';

                setTimeout(() => {
                    showNotification('Update added successfully!', 'success');

                    // Reset form
                    event.target.reset();
                    button.disabled = false;
                    button.innerHTML = originalText;

                    // Add new row to table (simulation)
                    addNewUpdateRow();
                }, 1500);
            }

            return false;
        }

        function confirmSubmit(event) {

            const confirmed = confirm('Are you sure you want to submit the team to the teacher?\n\nOnce submitted, no further changes can be made.');

            if (confirmed) {
                const button = event.target.querySelector('button[type="submit"]');

                button.disabled = true;
                button.innerHTML = '? Submitting...';

                setTimeout(() => {
                    showNotification('Team submitted successfully to teacher!', 'success');

                    button.innerHTML = '? Submitted';
                    button.style.background = 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)';

                    // Update status badge
                    const statusBadge = document.querySelector('.badge.bg-warning');
                    if (statusBadge) {
                        statusBadge.className = 'badge bg-success';
                        statusBadge.textContent = 'Submitted March 15, 2024';
                    }
                }, 2000);
            }

            return false;
        }

        function handleAssignTask(event) {

            const formData = new FormData(event.target);
            const assignedTo = event.target.querySelector('select').selectedOptions[0].text;
            const taskDescription = formData.get('content');

            const button = event.target.querySelector('button[type="submit"]');
            const originalText = button.innerHTML;

            button.disabled = true;
            button.innerHTML = '? Assigning...';

            setTimeout(() => {
                showNotification(`Task assigned to ${assignedTo} successfully!`, 'success');

                // Close modal
                assignModal.style.display = 'none';
                document.body.style.overflow = 'auto';

                // Reset form
                event.target.reset();
                button.disabled = false;
                button.innerHTML = originalText;
            }, 1500);

            return false;
        }

        // Add new update row (simulation)
        function addNewUpdateRow() {
            const tbody = document.querySelector('.table tbody');
            const newRow = document.createElement('tr');
            const now = new Date().toLocaleString();

            newRow.innerHTML = `
                <td>${now}</td>
                <td>Current User</td>
                <td>
                    <div>New update added</div>
                </td>
                <td><span class="status-not-started">? No</span></td>
                <td>
                    <form style="display:inline;">
                        <button class="btn btn-sm btn-outline-success" type="submit">? Mark Reviewed</button>
                    </form>
                </td>
            `;

            tbody.insertBefore(newRow, tbody.firstChild);

            // Animate new row
            newRow.style.opacity = '0';
            newRow.style.transform = 'translateY(-20px)';

            setTimeout(() => {
                newRow.style.transition = 'all 0.5s ease';
                newRow.style.opacity = '1';
                newRow.style.transform = 'translateY(0)';
            }, 100);
        }

        // Show notification function
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1001;
                min-width: 300px;
                animation: slideInRight 0.5s ease-out;
            `;
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.5s ease-out';
                setTimeout(() => notification.remove(), 500);
            }, 4000);
        }

        // Add ripple effect to buttons
        document.querySelectorAll('.btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                if (this.disabled) return;

                const ripple = document.createElement('span');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s ease-out;
                    pointer-events: none;
                `;

                this.appendChild(ripple);

                setTimeout(() => ripple.remove(), 600);
            });
        });

        // Add CSS for animations
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes ripple {
                to {
                    transform: scale(2);
                    opacity: 0;
                }
            }

            @@keyframes slideInRight {
                from {
                    opacity: 0;
                    transform: translateX(100%);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }

            @@keyframes slideOutRight {
                from {
                    opacity: 1;
                    transform: translateX(0);
                }
                to {
                    opacity: 0;
                    transform: translateX(100%);
                }
            }
        `;
        document.head.appendChild(style);

        // Enhanced hover effects for table rows
        document.querySelectorAll('.table tbody tr').forEach(row => {
            row.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
                this.style.boxShadow = '0 8px 25px rgba(34, 197, 94, 0.15)';
            });

            row.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = 'none';
            });
        });
    </script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9795742395f76f7a',t:'MTc1NjkwNDY3NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>

