@model List<TaskAssignmentSystem.Models.Users.Notification>

@{
    ViewData["Title"] = "Notifications";
}

<div class="container">
    <div class="card">
        <div class="header-section">
            <div>
                <h1>Notifications</h1>
            </div>
            <div>
                <button class="btn btn-outline-secondary btn-sm" onclick="markAllAsRead()" style="border: 2px solid; outline: 2px solid #22c55e;">
                    ✅ Mark All Read
                </button>
            </div>
        </div>

        <!-- Stats Section -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-number" id="totalCount">@Model.Count</div>
                <div class="stat-label">Total Notifications</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="unreadCount">@Model.Count(n => !n.IsRead)</div>
                <div class="stat-label">Unread</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="readCount">@Model.Count(n => n.IsRead)</div>
                <div class="stat-label">Read</div>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="filter-section">
            <span class="filter-label">📋 Filter:</span>
            <button class="btn btn-sm btn-primary" onclick="filterNotifications('all')" id="filterAll">
                All
            </button>
            <button class="btn btn-sm btn-outline-secondary" onclick="filterNotifications('unread')" id="filterUnread">
                Unread Only
            </button>
            <button class="btn btn-sm btn-outline-secondary" onclick="filterNotifications('read')" id="filterRead">
                Read Only
            </button>
        </div>

        <!-- Notifications Table -->
        <div class="table-container">
            <table class="table" id="notificationsTable">
                <thead>
                    <tr>
                        <th>📧 Message</th>
                        <th>📅 Date</th>
                        <th>⚡ Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var n in Model)
                    {
                        <tr class="@(n.IsRead ? "" : "table-warning")" data-status="@(n.IsRead ? "read" : "unread")" data-id="@n.Id">
                            <td>@(n.Message.Length > 50 ? n.Message.Substring(0, 50) + "..." : n.Message)</td>
                            <td>@n.CreatedAt.ToLocalTime()</td>
                            <td>
                                <button class="btn btn-sm btn-primary" onclick="viewNotification(@n.Id)">
                                    👁️ View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Notification Modal -->
<div id="notificationModal" class="modal-overlay" style="display:none;">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Notification Details</h5>
            <button type="button" class="btn-close" onclick="closeModal()">✕</button>
        </div>
        <div class="modal-body" id="notificationBody"></div>
        <div class="modal-footer">
            <button type="button" class="btn btn-success" onclick="markAsRead()" id="markReadBtn">
                ✅ Mark as Read
            </button>
            <button type="button" class="btn btn-secondary" onclick="closeModal()">
                ❌ Close
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentNotificationId = 0;
        let currentFilter = 'all';

        function viewNotification(id) {
            currentNotificationId = id;

            fetch(`/Users/GetNotificationById/${id}`)
                .then(res => res.json())
                .then(data => {
                    document.getElementById('notificationBody').textContent = data.message;

                    const row = document.querySelector(`tr[data-id="${id}"]`);
                    const isRead = row.classList.contains('table-warning') === false;

                    const markReadBtn = document.getElementById('markReadBtn');
                    markReadBtn.style.display = isRead ? 'none' : 'inline-block';

                    document.getElementById('notificationModal').style.display = 'flex';
                    document.body.style.overflow = 'hidden';
                });
        }

        function closeModal() {
            document.getElementById('notificationModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function markAsRead() {
            fetch(`/Users/MarkNotificationRead/${currentNotificationId}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const row = document.querySelector(`tr[data-id="${currentNotificationId}"]`);
                        row.classList.remove('table-warning');
                        row.setAttribute('data-status', 'read');

                        updateStats();
                        closeModal();
                    }
                });
        }

        function markAllAsRead() {
           

            fetch(`/Users/MarkAllNotificationsRead`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.querySelectorAll('tr.table-warning').forEach(row => {
                            row.classList.remove('table-warning');
                            row.setAttribute('data-status', 'read');
                        });
                        updateStats();
                    }
                });
        }

        function filterNotifications(filter) {
            currentFilter = filter;

            document.querySelectorAll('.filter-section .btn').forEach(btn => {
                btn.className = btn.className.replace('btn-primary', 'btn-outline-secondary');
            });

            const activeBtn = document.getElementById(`filter${filter.charAt(0).toUpperCase() + filter.slice(1)}`);
            if (activeBtn) activeBtn.className = activeBtn.className.replace('btn-outline-secondary', 'btn-primary');

            document.querySelectorAll('#notificationsTable tr').forEach(row => {
                const status = row.getAttribute('data-status');
                row.style.display = (filter === 'all' || status === filter) ? '' : 'none';
            });
        }

        function updateStats() {
            const allRows = document.querySelectorAll('#notificationsTable tr');
            const unreadRows = document.querySelectorAll('#notificationsTable tr.table-warning');

            document.getElementById('totalCount').textContent = allRows.length;
            document.getElementById('unreadCount').textContent = unreadRows.length;
            document.getElementById('readCount').textContent = allRows.length - unreadRows.length;
        }

        document.getElementById('notificationModal').addEventListener('click', e => {
            if (e.target === e.currentTarget) closeModal();
        });

        document.querySelectorAll('.btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                const ripple = document.createElement('span');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s ease-out;
                    pointer-events: none;
                `;
                this.appendChild(ripple);
                setTimeout(() => ripple.remove(), 600);
            });
        });

        updateStats();
    </script>
}



<style>

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f8fffe 0%, #f0fdf4 100%);
        min-height: 100vh;
        padding: 40px 20px;
        line-height: 1.6;
    }

    /* Container */
    .container {
        min-width: 1200px;
        max-width:1200px;
        margin: 20px auto;
    }

    /* Card Container */
    .card {
        background: linear-gradient(145deg, #ffffff 0%, #fefffe 100%);
        border: 1px solid rgba(34, 197, 94, 0.08);
        border-radius: 24px;
        box-shadow: 0 25px 60px rgba(34, 197, 94, 0.06), 0 15px 40px rgba(0, 0, 0, 0.03);
        position: relative;
        overflow: hidden;
        transition: all 0.4s ease;
        animation: slideUp 0.8s ease-out;
        padding: 32px;
        margin-bottom: 24px;
    }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
        }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(40px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    /* Header Section */
    .header-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 32px;
        animation: fadeInLeft 0.6s ease-out 0.2s both;
    }

    h1 {
        color: #15803d;
        font-size: 32px;
        font-weight: 700;
        letter-spacing: -0.5px;
        margin: 0;
        position: relative;
        padding-left: 50px;
    }

        h1::before {
            content: '🔔';
            position: absolute;
            left: 0;
            top: -2px;
            font-size: 32px;
            animation: bounce 2s infinite;
        }

    @@keyframes fadeInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-6px);
    }

    60% {
        transform: translateY(-3px);
    }

    }

    /* Stats Section */
    .stats-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 32px;
        animation: fadeIn 0.8s ease-out 0.4s both;
    }

    .stat-card {
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        border: 1px solid rgba(34, 197, 94, 0.1);
        border-radius: 16px;
        padding: 20px;
        text-align: center;
        position: relative;
    }

    .stat-number {
        font-size: 28px;
        font-weight: 700;
        color: #15803d;
        margin-bottom: 8px;
    }

    .stat-label {
        color: #374151;
        font-weight: 500;
        font-size: 14px;
    }

    /* Button Styling */
    .btn {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
        border: 2px solid;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        white-space: nowrap;
        background: none;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.6s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-sm {
        padding: 8px 16px;
        font-size: 13px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #22c55e 0%, #15803d 100%);
        border-color: #15803d;
        color: white;
        box-shadow: 0 6px 20px rgba(34, 197, 94, 0.25);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #15803d 0%, #14532d 100%);
            border-color: #14532d;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(34, 197, 94, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-success {
        background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
        border-color: #16a34a;
        color: white;
        box-shadow: 0 6px 20px rgba(34, 197, 94, 0.25);
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #16a34a 0%, #15803d 100%);
            border-color: #15803d;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(34, 197, 94, 0.35);
            color: white;
            text-decoration: none;
        }

    .btn-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        border-color: #4b5563;
        color: white;
        box-shadow: 0 6px 20px rgba(107, 114, 128, 0.2);
    }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            border-color: #374151;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(107, 114, 128, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-outline-secondary {
        background: transparent;
        border-color: #6b7280;
        color: #6b7280;
    }

        .btn-outline-secondary:hover {
            background: #6b7280;
            border-color: #6b7280;
            color: white;
            transform: translateY(-2px);
            text-decoration: none;
        }

    /* Table Styling */
    .table-container {
        animation: fadeIn 0.8s ease-out 0.6s both;
        overflow-x: auto;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(34, 197, 94, 0.08);
        margin-bottom: 32px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 16px;
        overflow: hidden;
    }

        .table thead {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        }

        .table th {
            padding: 16px 20px;
            font-weight: 600;
            color: #15803d;
            text-align: left;
            border-bottom: 2px solid rgba(34, 197, 94, 0.1);
            font-size: 14px;
            letter-spacing: 0.5px;
        }

        .table td {
            padding: 16px 20px;
            border-bottom: 1px solid rgba(34, 197, 94, 0.05);
            color: #374151;
            font-weight: 500;
            vertical-align: middle;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

            .table tbody tr:hover {
                background: linear-gradient(135deg, rgba(240, 253, 244, 0.5) 0%, rgba(220, 252, 231, 0.3) 100%);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);
            }

    /* Unread notification styling */
    .table-warning {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%) !important;
        border-left: 4px solid #f59e0b;
    }

        .table-warning:hover {
            background: linear-gradient(135deg, #fde68a 0%, #fcd34d 100%) !important;
        }

    /* Notification status indicators */
    .notification-status {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-unread {
        color: #f59e0b;
    }

        .status-unread::before {
            content: '🟡';
            font-size: 14px;
        }

    .status-read {
        color: #22c55e;
    }

        .status-read::before {
            content: '✅';
            font-size: 14px;
        }

    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(8px);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease-out;
    }

    .modal-content {
        background: linear-gradient(145deg, #ffffff 0%, #fefffe 100%);
        border: 1px solid rgba(34, 197, 94, 0.08);
        border-radius: 24px;
        padding: 32px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 25px 60px rgba(34, 197, 94, 0.15), 0 15px 40px rgba(0, 0, 0, 0.1);
        animation: slideUp 0.3s ease-out;
        position: relative;
    }

        .modal-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
            border-radius: 24px 24px 0 0;
        }

    .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 1px solid rgba(34, 197, 94, 0.1);
    }

    .modal-title {
        color: #15803d;
        font-size: 24px;
        font-weight: 700;
        margin: 0;
        position: relative;
        padding-left: 35px;
    }

        .modal-title::before {
            content: '📧';
            position: absolute;
            left: 0;
            top: 0;
            font-size: 24px;
        }

    .btn-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6b7280;
        transition: all 0.3s ease;
    }

        .btn-close:hover {
            color: #374151;
            transform: scale(1.1);
        }

    .modal-body {
        margin-bottom: 24px;
        color: #374151;
        font-size: 16px;
        line-height: 1.6;
    }

    .modal-footer {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    /* Filter buttons */
    .filter-section {
        margin-bottom: 24px;
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
        align-items: center;
    }

    .filter-label {
        color: #374151;
        font-weight: 600;
        margin-right: 8px;
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #9ca3af;
    }

    .empty-state-icon {
        font-size: 64px;
        margin-bottom: 16px;
        opacity: 0.5;
    }

    .empty-state-text {
        font-size: 18px;
        font-weight: 500;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        body

    {
        padding: 20px 15px;
    }

    .card {
        padding: 20px;
    }

    .header-section {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    h1 {
        font-size: 26px;
        padding-left: 40px;
    }

        h1::before {
            font-size: 26px;
        }

    .stats-section {
        grid-template-columns: 1fr;
    }

    .table-container {
        overflow-x: auto;
    }

    .table {
        min-width: 600px;
    }

    .modal-content {
        padding: 24px;
        width: 95%;
    }

    .filter-section {
        flex-direction: column;
        align-items: flex-start;
    }

    }

    @@media (max-width: 576px) {
        h1

    {
        font-size: 22px;
        padding-left: 35px;
    }

    h1::before {
        font-size: 22px;
    }

    .card {
        padding: 16px;
    }

    .table th,
    .table td {
        padding: 12px 16px;
        font-size: 13px;
    }

    .modal-content {
        padding: 20px;
    }

    }

    /* Animation delays for table rows */
    .table tbody tr:nth-child(1) {
        animation: fadeInUp 0.6s ease-out 0.7s both;
    }

    .table tbody tr:nth-child(2) {
        animation: fadeInUp 0.6s ease-out 0.8s both;
    }

    .table tbody tr:nth-child(3) {
        animation: fadeInUp 0.6s ease-out 0.9s both;
    }

    .table tbody tr:nth-child(4) {
        animation: fadeInUp 0.6s ease-out 1.0s both;
    }

    .table tbody tr:nth-child(5) {
        animation: fadeInUp 0.6s ease-out 1.1s both;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }
</style>